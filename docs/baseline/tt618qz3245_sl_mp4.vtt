WEBVTT

00:05.300 --> 00:06.700
I'm sorry.

00:30.000 --> 00:30.800
Music

00:56.060 --> 00:58.640
At SRI, we are experimenting with a mobile

00:58.640 --> 01:03.640
robot. We call him Shaky. Our goal is to

01:03.640 --> 01:05.080
give Shakey some of the abilities

01:05.080 --> 01:07.040
associated with intelligence, abilities

01:07.040 --> 01:09.660
like planning and learning. Even though

01:09.660 --> 01:11.580
the tasks we give Shakey seem quite

01:11.580 --> 01:13.900
simple, the programs needed to plan and

01:13.900 --> 01:17.060
coordinate his activities are complex. The

01:17.060 --> 01:18.900
main purpose of our research is to learn

01:18.900 --> 01:21.240
how to design these programs so that

01:21.240 --> 01:23.180
robots can be employed in a variety of

01:23.180 --> 01:25.960
tasks ranging from space exploration to

01:25.960 --> 01:29.700
industrial automation. Shakey operates in

01:29.700 --> 01:30.500
this experimental environmental

01:30.500 --> 01:32.820
environment of rooms, doorways, and simple

01:32.820 --> 01:33.240
objects.

01:38.340 --> 01:40.520
The top lens belongs to Shakey's

01:40.520 --> 01:42.980
television camera. He uses it to obtain

01:42.980 --> 01:45.300
visual information about his own location

01:45.300 --> 01:48.980
or about other objects. These walls were

01:48.980 --> 01:50.840
made high enough so that Shakey cannot see

01:50.840 --> 01:52.260
over them with his television camera.

01:52.260 --> 01:56.620
camera. Shakey uses these feelers or cat

01:56.620 --> 01:58.700
whiskers to tell him if he has bumped into

01:58.700 --> 02:01.940
anything. He can push objects with this

02:01.940 --> 02:02.340
push bar.

02:07.620 --> 02:10.700
The programs controlling Shakey reside in

02:10.700 --> 02:13.640
a large PDP-10 computer and occupy over

02:13.640 --> 02:19.800
300,000 36-bit words of storage. Shakey

02:19.800 --> 02:21.820
communicates with the computer over a

02:21.820 --> 02:22.340
radio link.

02:26.360 --> 02:29.060
We use a teletype to give instructions to

02:29.060 --> 02:31.200
the computer programs that control Shakey.

02:33.080 --> 02:35.320
Shakey reports back to us using the

02:35.320 --> 02:38.160
teletype and the cathode ray tube display.

02:42.240 --> 02:44.800
An executive program handles communication

02:44.800 --> 02:47.420
between the experimenter and and the robot

02:47.420 --> 02:47.820
system.

02:51.460 --> 02:53.600
Shakey's movements are directly controlled

02:53.600 --> 02:55.880
by a set of low-level action programs.

02:58.010 --> 03:00.480
These programs convert orders such as roll

03:00.480 --> 03:03.820
2.1 feet into appropriate commands to

03:03.820 --> 03:05.860
circuits on the vehicle that control

03:05.860 --> 03:06.600
Shakey's motors.

03:09.600 --> 03:12.300
Two other examples of low-level actions

03:12.710 --> 03:15.420
are pan fan, and tilt.

03:20.680 --> 03:23.160
The low level actions provide some of the

03:23.160 --> 03:25.100
building blocks for more complicated and

03:25.100 --> 03:27.000
powerful programs called intermediate

03:27.000 --> 03:32.500
level actions. One such action is go-to.

03:43.900 --> 03:46.680
Go-to plans and executes a route to a

03:46.680 --> 03:48.760
named goal location, marked with a cross

03:48.760 --> 03:51.240
here, circumventing obstacles if need be.

03:57.020 --> 04:00.020
The Go-To program plans a route by first

04:00.020 --> 04:02.040
computing whether any obstacles lie on a

04:02.040 --> 04:06.400
direct path. If so, points near the

04:06.400 --> 04:11.160
obstacle are set up as sub-goals. After

04:11.160 --> 04:13.400
Shakey computes a route, he traverses it

04:13.400 --> 04:13.880
to the goal.

04:19.620 --> 04:22.660
Another intermediate level action pushes a

04:22.660 --> 04:25.340
named object, box one in this example, to

04:25.340 --> 04:27.280
a location specified by a pair of

04:27.280 --> 04:27.640
coordinates.

04:30.680 --> 04:32.660
A feature of the intermediate level

04:32.660 --> 04:35.060
actions is their ability to recover from

04:35.060 --> 04:38.960
unforeseen accidents. Our gremlin,

04:39.140 --> 04:41.520
Charlie, symbolizes as an agent of change

04:41.520 --> 04:46.040
unknown to Shakey. Shakey's sensors tell

04:46.040 --> 04:48.020
him that the box has slipped off the push

04:48.020 --> 04:50.620
bar, but his cat whiskers tell him where

04:50.620 --> 04:53.760
the box is so he can get behind it and

04:53.760 --> 04:54.400
resume pushing.

05:36.980 --> 05:41.600
 level actions is

05:41.600 --> 05:43.660
designed to try again if the first attempt

05:43.660 --> 05:44.120
fails.

06:01.860 --> 06:04.420
We use the push program in another

06:04.420 --> 06:06.340
intermediate level action that blocks a

06:06.340 --> 06:10.840
doorway with a box. We also have an

06:10.840 --> 06:12.980
intermediate level action to take Shakey

06:12.980 --> 06:15.000
through a doorway into an adjacent room.

06:16.360 --> 06:18.360
Ordinarily, Shakey keeps track of his own

06:18.360 --> 06:20.360
position by counting wheel revolutions.

06:22.360 --> 06:24.720
This dead reckoning navigation is quite

06:24.720 --> 06:27.500
accurate, but errors do accumulate. If an

06:27.500 --> 06:29.060
intermediate level action needs more

06:29.060 --> 06:31.660
precise location information, it calls on

06:31.660 --> 06:33.820
a special picture taking routine called

06:33.820 --> 06:38.000
landmark for orientation. Here we see

06:38.000 --> 06:39.760
Shakey taking a picture of the nearest

06:39.760 --> 06:42.240
reliable landmark, in this case a corner

06:42.240 --> 06:42.720
of the room.

06:49.200 --> 06:51.680
Shakey's view is shown on the TV monitor.

06:56.300 --> 06:58.980
His vision programs enhance the edges of

06:58.980 --> 07:01.280
of the picture to produce a line

07:01.280 --> 07:03.620
representation on the cathode ray tube

07:03.620 --> 07:06.520
display. If Shakey's dead reckoned

07:06.520 --> 07:09.000
estimate of his position were correct, the

07:09.000 --> 07:10.540
outline of the corner would have looked

07:10.540 --> 07:14.880
like this. Shakey uses the new picture

07:14.880 --> 07:17.360
information to improve his estimate of his

07:17.360 --> 07:21.880
location. The intermediate level actions

07:21.880 --> 07:23.640
communicate directly with the executive

07:23.640 --> 07:25.980
program and indirectly with the vehicle.

07:30.140 --> 07:32.880
To summarize, intermediate level actions

07:32.880 --> 07:35.120
are pre-programmed to work on frequently

07:35.120 --> 07:37.720
encountered tasks. They can recover from

07:37.720 --> 07:40.420
several types of errors and accidents and

07:40.420 --> 07:42.620
they incorporate powerful subroutines for

07:42.620 --> 07:44.540
analyzing pictures and for navigating.

07:47.640 --> 07:49.840
Of course, for intermediate level actions

07:49.840 --> 07:51.800
to work, they need information about

07:51.800 --> 07:52.780
Shakey's experimental environmental

07:52.780 --> 07:56.040
environment. Shakey models his environment

07:56.040 --> 07:57.860
with a list of assertions giving

07:57.860 --> 08:00.140
information about the locations of walls,

08:00.440 --> 08:04.360
doorways, other objects, and himself. From

08:04.360 --> 08:06.360
his model, Shakey knows that the floor

08:06.360 --> 08:08.880
plan of his world looks like this. The

08:08.880 --> 08:13.780
small hand points to Shakey. His model may

08:13.780 --> 08:16.520
be incomplete. complete. For example, it

08:16.520 --> 08:18.360
happens that the contents of this room are

08:18.360 --> 08:18.680
unknown.

08:22.260 --> 08:25.620
The model may also be inaccurate. It shows

08:25.620 --> 08:27.420
that the upper right-hand corner of room

08:27.420 --> 08:30.300
two is empty, even though a box is in fact

08:30.300 --> 08:30.740
present.

08:38.760 --> 08:40.900
The executive and the action programs

08:40.900 --> 08:42.780
communicate with the model so that it can

08:42.780 --> 08:46.580
be updated either by a user or by Shakey

08:46.580 --> 08:46.800
himself.

08:52.800 --> 08:55.080
We want Shakey to be able to combine

08:55.080 --> 08:57.760
intermediate level actions to perform new

08:57.760 --> 09:00.040
tasks not covered by any single action.

09:00.560 --> 09:03.100
For this purpose, Shakey uses a planning

09:03.100 --> 09:07.020
program called STRIPS. STRIPS employs such

09:07.020 --> 09:08.820
artificial intelligence techniques as

09:08.820 --> 09:11.120
means-ends analysis and automatic theorem

09:11.120 --> 09:15.420
improving. A special action model tells

09:15.420 --> 09:17.480
strips about the preconditions and the

09:17.480 --> 09:19.480
predicted effects of each intermediate

09:19.480 --> 09:20.200
level action.

09:24.620 --> 09:26.980
For example, the action that takes Shakey

09:26.980 --> 09:29.180
through a door requires that he be near

09:29.180 --> 09:31.520
the door. Its effect is that he will end

09:31.520 --> 09:34.220
up in the next room. The action model uses

09:34.220 --> 09:35.840
the language of the predicate calculus

09:35.840 --> 09:37.840
rather than English as shown here.

09:41.960 --> 09:44.340
STRIPS uses the action model to predict

09:44.340 --> 09:46.200
what the state of the environment would be

09:46.200 --> 09:48.840
if various actions were taken.

09:54.240 --> 09:56.800
First, STRIPS finds those actions that are

09:56.800 --> 09:59.500
most relevant to the task. The

09:59.500 --> 10:01.260
preconditions of these relevant actions

10:01.260 --> 10:05.140
are set up as subgoals. These subgoals, in

10:05.140 --> 10:08.140
turn, lead to others. Finally, all of the

10:08.140 --> 10:10.700
needed actions are assembled into a plan

10:10.700 --> 10:11.840
to accomplish the goal.

10:15.920 --> 10:18.280
This chart shows the major components of

10:18.280 --> 10:19.380
the complete robot system.

10:22.160 --> 10:23.800
Now we'll watch Shakey solve some

10:23.800 --> 10:24.200
problems.

10:28.220 --> 10:31.260
In our first task for Shakey, we want him

10:31.260 --> 10:36.080
to use this box to block this door,

10:36.260 --> 10:39.440
starting

10:39.440 --> 10:43.140
from this position. The robot executive is

10:43.140 --> 10:45.320
capable of understanding a wide variety of

10:45.320 --> 10:47.180
English statements, questions, and

10:47.180 --> 10:50.080
commands. We can type Shakey's first task

10:50.080 --> 10:52.020
in English, which is translated into to

10:52.020 --> 10:54.120
predicate calculus, the language used by

10:54.120 --> 10:57.140
Strips. Strips analyzes the task and

10:57.140 --> 10:58.720
produces a plan to solve it.

11:02.760 --> 11:05.400
Let's diagram the plan found by Strips.

11:07.600 --> 11:10.680
First, Shakey plans to use the action go

11:10.680 --> 11:13.420
to D5 that will take him to the doorway.

11:14.860 --> 11:17.980
Then he will use the actions go through D5

11:17.980 --> 11:20.060
and go to D3.

11:23.900 --> 11:27.880
Finally, he plans to use go through D3 and

11:27.880 --> 11:33.180
block D4 with box 1. After computing the

11:33.180 --> 11:36.420
plan, Shakey begins to execute it. He

11:36.420 --> 11:38.540
moves to the first doorway by using the

11:38.540 --> 11:40.240
action, go to D5.

12:00.720 --> 12:03.580
He looks through the doorway because he is

12:03.580 --> 12:05.540
uncertain about the contents of the next

12:05.540 --> 12:08.780
room. room. His view of the floor along

12:08.780 --> 12:12.000
his path shows no obstructions, so he

12:12.000 --> 12:13.880
moves into the next room by using the

12:13.880 --> 12:15.700
action, go through D5.

12:20.500 --> 12:22.900
But just after this move, Charlie the

12:22.900 --> 12:24.780
Gremlin blocks the next doorway with a

12:24.780 --> 12:28.520
box. Shakey doesn't know it yet, but the

12:28.520 --> 12:30.140
box is right in his planned path.

12:35.540 --> 12:37.440
Because the contents of this room are

12:37.440 --> 12:39.800
unknown, he checks the next leg of his

12:39.800 --> 12:41.360
journey with a television camera.

12:47.180 --> 12:49.980
The box is in Shakey's field of view. This

12:49.980 --> 12:51.520
is how it appears on the TV monitor.

12:56.900 --> 12:59.060
Shaky's vision programs analyze the

12:59.060 --> 13:01.740
picture and tell him that his path to the

13:01.740 --> 13:04.640
doorway is obstructed. He takes another TV

13:04.640 --> 13:08.040
picture of the obstructing object. Here we

13:08.040 --> 13:09.920
monitor on the cathode ray tube display

13:09.920 --> 13:12.380
the results of vision programs that

13:12.380 --> 13:14.880
enhance edges, identify the main regions

13:14.880 --> 13:17.480
of the scene and determine the location of

13:17.480 --> 13:18.400
the box on the floor.

13:23.980 --> 13:26.720
Once located, the object that blocks his

13:26.720 --> 13:29.840
path can be entered in Shakey's model and

13:29.840 --> 13:31.520
given a name, Box 2.

13:37.640 --> 13:40.200
Now Shakey realizes that he cannot carry

13:40.200 --> 13:42.760
out the original version of his plan. His

13:42.760 --> 13:45.440
first recourse is to see if some other

13:45.440 --> 13:47.700
version of the old plan might work.

13:51.620 --> 13:54.280
Shakey remembers the form of a plan and

13:54.280 --> 13:58.180
can substitute other symbols into the same

13:58.180 --> 14:00.140
form to produce another version of the

14:00.140 --> 14:03.420
plan. In this case, Shakey was fortunate.

14:03.640 --> 14:05.480
The new version will solve his problem.

14:06.240 --> 14:08.380
Otherwise, he would have had to use strips

14:08.380 --> 14:11.100
to make a brand new plan, possibly one

14:11.100 --> 14:13.300
that used the unblock action to clear the

14:13.300 --> 14:17.480
doorway. Here though, strips was not

14:17.480 --> 14:20.000
needed, so Shakey begins to execute the

14:20.000 --> 14:23.080
new version of the old plan. First he

14:23.080 --> 14:24.660
turns and goes to another door.

14:40.040 --> 14:41.700
He goes through the door

14:50.400 --> 14:52.680
and then goes over to the next door.

15:11.840 --> 15:14.100
Finally, he goes through the next doorway

15:14.100 --> 15:16.340
where he can use the intermediate level

15:16.340 --> 15:19.260
action block D4 with box one.

15:44.060 --> 15:47.340
The block program automatically plans a

15:47.340 --> 15:49.940
route to a pushing place behind box one.

16:33.040 --> 16:35.120
These lights come on whenever Shakey

16:35.120 --> 16:37.320
intends to push an object or back away

16:37.320 --> 16:37.800
from one.

16:51.720 --> 16:53.960
Shaky knows he has to maneuver box one

16:53.960 --> 16:54.940
around the wedge.

17:40.280 --> 17:41.680


17:52.260 --> 17:54.460
Finally, box one is pushed in front of the

17:54.460 --> 17:54.740
doorway.

18:35.800 --> 18:38.600
When the task is completed, Shakey doesn't

18:38.600 --> 18:39.980
forget the plan he has generated.

18:43.600 --> 18:45.940
The form of this plan is remembered and

18:45.940 --> 18:48.560
stored away as a new action routine called

18:48.560 --> 18:52.140
Macrop 1. Macrop 1 is a learned macro

18:52.140 --> 18:54.580
action that takes Shakey from one room

18:54.580 --> 18:57.060
through an intermediate room and into a

18:57.060 --> 19:00.960
third where he blocks a doorway. When

19:00.960 --> 19:03.280
Macrop 1 is added to Shakey's action

19:03.280 --> 19:06.120
repertoire, a description of it is added

19:06.120 --> 19:08.660
to his model of actions so that strips can

19:08.660 --> 19:10.500
use it in planning more complex tasks.

19:11.460 --> 19:13.480
Let's see how Shakey makes use of this

19:13.480 --> 19:15.680
newly learned action to unblock the door

19:15.680 --> 19:17.080
that was blocked by Charlie.

19:24.640 --> 19:27.580
Strips is given the task in English and

19:27.580 --> 19:30.040
begins to analyze the available actions to

19:30.040 --> 19:31.920
determine which will help to solve the

19:31.920 --> 19:32.240
problem.

19:36.480 --> 19:38.280
Strips decides that it must apply the

19:38.280 --> 19:41.140
action unblock. To do so it has the sub

19:41.140 --> 19:42.960
problem of getting to the room containing

19:42.960 --> 19:47.980
box two. Strips solves this sub problem by

19:47.980 --> 19:50.120
using the first four components of Macrop

19:50.120 --> 19:50.360
1.

19:53.660 --> 19:55.980
The new plan is rapidly found to be a

19:55.980 --> 19:57.900
simple modification of the old one and

19:57.900 --> 20:00.660
Shakey is ready to execute it. This

20:00.660 --> 20:02.720
ability to learn enables Shakey to plan

20:02.720 --> 20:04.900
his second task in one-third the time that

20:04.900 --> 20:06.060
it took to plan his first plan.

20:09.080 --> 20:12.200
Let's watch Shakey execute the plan. First

20:12.200 --> 20:14.380
he uses the action go to D1.

20:33.580 --> 20:35.720
Shaky navigates around the wedge to get to

20:35.720 --> 20:36.100
the doorway.

21:03.540 --> 21:09.960
He goes through the first door and decides

21:09.960 --> 21:12.340
to take a TV picture to update his own

21:12.340 --> 21:12.740
location.

21:30.480 --> 21:32.920
The new location information is used to

21:32.920 --> 21:34.520
correct his position in the model.

21:36.760 --> 21:39.200
Confident of his position, Shakey turns to

21:39.200 --> 21:40.400
go to the next door.

22:08.800 --> 22:11.260
He goes through the door into the room

22:11.260 --> 22:12.360
containing box two.

22:18.940 --> 22:21.480
Once in this room, he can use the action

22:21.480 --> 22:26.080
unblock D3. He calculates an accessible

22:26.080 --> 22:29.200
pushing place and heads toward it to push

22:29.200 --> 22:29.840
the box away.

23:22.180 --> 23:22.920


23:25.960 --> 23:28.280
Our experiments with Shakey have helped us

23:28.280 --> 23:30.540
learn more about how a computer can be

23:30.540 --> 23:33.100
programmed to control a robot. Continuing

23:33.100 --> 23:35.960
research at major centers like SRI will

23:35.960 --> 23:38.180
someday allow intelligent robots to leave

23:38.180 --> 23:40.260
the laboratory and enter the service of

23:40.260 --> 23:40.440
man.

24:22.320 --> 24:22.960


24:31.220 --> 24:34.020
Thank you.

